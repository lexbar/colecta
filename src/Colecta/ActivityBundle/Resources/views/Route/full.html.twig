{% extends '::frontend.html.twig' %}

{% block title %}{{ item.name}} |Tracks{% endblock %}
{% block onload 'initialize()' %}

{% block article %}    
<div class="item panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title"><i class="fa fa-{{ itemIcons[item.type] }}"></i> <a href="{{ path('ColectaRouteView', { 'slug': item.slug }) }}">{{ item.name }}</a></h3>
    </div>
    
    <div class="panel-body">
        <p class="details"><a href="{{ path('userProfile', { 'id': item.author.id }) }}" class="username"><img src="{% if item.author.avatar %}{{ path('userAvatar',{'uid':item.author.id,'width':40,'height':40}) }}{% else %}/img/unknown.gif{% endif %}"> {{item.author.name}}</a> {% include 'ColectaItemBundle:Default:timeago.html.twig' with { 'date': item.date } only %}{% if item.category %} en <a class="category" href="{{ path('ColectaCategoryView', { 'slug': item.category.slug }) }}">{{ item.category.name }}</a>{% endif %}</p>
        
        <div id="map" style="width:auto;height:300px;"></div>
        
        <div id="chart" style="width:auto;height:200px;"></div>
        
        <hr>
            
        <p>{{ item.text | usercontent | raw | nl2br }}</p>
    
        {% include 'ColectaActivityBundle:Default:properties.html.twig' with { item: item } only %}
    </div>
    
    <div class="panel-footer">
        {% include 'ColectaItemBundle:Default:itemactions.html.twig' with { item: item } only %}
        
        {% include 'ColectaItemBundle:Comment:comments.html.twig' with { 'comments': item.comments, 'item': item, 'collapse': 5 } only %}
    </div>
</div>

{% include 'ColectaItemBundle:Default:related.html.twig' with { 'items' : item.related } %}











    {#
    
    <button id="fullscreen" onClick="toggleFullScreen()" class="btn btn-small pull-right" type="button"><i class="icon-fullscreen icon-fixed-width"></i></button>
    
    <div class="dropdown pull-right">
        <button class="btn btn-small btn-primary" type="button" onClick="return false;">Descargar <i id="ddarrow" class="icon-chevron-down icon-white"></i></button>
        <ul class="dropdown-menu download" role="menu" aria-labelledby="dropdownMenu" id="dropdown">
            <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'gpx'}) }}">GPX</a></li>
            <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'kml'}) }}">KML</a></li>
            <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'plt'}) }}">PLT</a></li>
            <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'gdb'}) }}">GDB</a></li>
            <li class="divider"></li>
            <li class="dropdown-submenu">
                <a tabindex="-1" href="#">Limitado a 500 puntos</a>
                <ul class="dropdown-menu">
                    <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'gpx'}) }}?simplified=500">GPX</a></li>
                    <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'kml'}) }}?simplified=500">KML</a></li>
                    <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'plt'}) }}?simplified=500">PLT</a></li>
                    <li><a tabindex="-1" href="{{ path('ColectaRouteDownload', {'slug':item.slug, 'extension':'gdb'}) }}?simplified=500">GDB</a></li>
                </ul>
            </li>
        </ul>
    </div>
    
        <div id="mapproperties">
            <button class="btn btn-danger btn-small btn-block" onClick="toggleFullScreen()">Salir <i class="icon-resize-small icon-white"></i></button>
            
            <ul class="nav nav-list">
                <li class="nav-header">Tracks</li>
                    <li><a href="#" onClick="map.fitBounds(bounds); return false;"><i style="color:#f00" class="icon-road"></i> {{ item.name }} <br><small>({% if item.trackpoints | length < 10000 %}{{ item.trackpoints | length }} puntos{% else %}Limitado a {{ item.trackpoints | length }} puntos.{% endif%})</small></a></li>
                <li class="divider"></li>
                <li class="nav-header">Puntos</li>
                    <li><a href="#" onClick="map.panTo(new google.maps.LatLng(points[0][0], points[0][1])); if(map.getZoom() < 15){ map.setZoom(15);} return false;"><i style="color:#f00;" class="icon-map-marker"></i> Inicio</a></li>
                    {% for rel in item.related if rel.type == 'Activity/Place' %}
                        <li><a href="#" onClick="map.panTo(new google.maps.LatLng({{ rel.latitude }}, {{ rel.longitude }})); if(map.getZoom() < 15){ map.setZoom(15);} return false;"><i style="color:#00f;" class="icon-map-marker"></i> {{ rel.name }}</a></li>
                    {% endfor %}
            </ul>
        </div>
        
        
    #}
        
{% endblock %}

{% block javascripts %}
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false&libraries=weather"></script>
    <script src="/js/highcharts.js"></script>
    <script>
     
    {% set boundsswlat, boundsswlng = item.trackpoints[0].latitude, item.trackpoints[0].longitude %}
    {% set boundsnelat, boundsnelng = item.trackpoints[0].latitude, item.trackpoints[0].longitude %} 
    {% set points = '[' ~ item.trackpoints[0].latitude ~ ',' ~ item.trackpoints[0].longitude ~ ',' ~ item.trackpoints[0].altitude ~ ']' %}
    
    {% for tp in item.trackpoints %}
        {% if not loop.first %}
            {% set points = points ~ ',[' ~ tp.latitude ~ ',' ~ tp.longitude ~ ',' ~ tp.altitude ~ ']' %}
            {% if tp.latitude < boundsswlat %}{% set boundsswlat = tp.latitude %}{% endif %}
            {% if tp.longitude < boundsswlng %}{% set boundsswlng = tp.longitude %}{% endif %}
            {% if tp.latitude > boundsnelat %}{% set boundsnelat = tp.latitude %}{% endif %}
            {% if tp.longitude > boundsnelng %}{% set boundsnelng = tp.longitude %}{% endif %}
        {% endif %}
    {% endfor %}
    
    var map;
    var positionMarker;
    var isFullScreen = false;
    var polyline = [];
    var chart = null;
    var chartData = [];
    var chartDistance = 0;
    var points = [{{ points }}];
    var bounds;
    var weatherLayer;
    
    function initialize() {   
        
        bounds = new google.maps.LatLngBounds(new google.maps.LatLng({{ boundsswlat }}, {{ boundsswlng }}), new google.maps.LatLng({{ boundsnelat }}, {{ boundsnelng }}));
        weatherLayer = new google.maps.weather.WeatherLayer({temperatureUnits: google.maps.weather.TemperatureUnit.CELSIUS, windSpeedUnits: google.maps.weather.WindSpeedUnit.KILOMETERS_PER_HOUR});
        
        var mapOptions = {
            zoom: 3,
            center: bounds.getCenter(),
            mapTypeId: google.maps.MapTypeId.TERRAIN, 
            streetViewControl: false
        };
        
        map = new google.maps.Map(document.getElementById('map'), mapOptions);
        map.fitBounds(bounds);
        
        var weatherDIV = document.createElement('div');
        weatherDIV.className = 'control';
        weatherDIV.innerHTML = 'MeteorologÃ­a';
        google.maps.event.addDomListener(weatherDIV, 'click', function() {
            toggleWeather();
        });
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(weatherDIV);
        
        positionMarker = new google.maps.Marker({
            position: new google.maps.LatLng(points[0][0], points[0][1]),
            map: map
        });
        
        $.each(points, function(i, value) { 
            //maps
            polyline.push(new google.maps.LatLng(value[0], value[1]));
            //highchart
            if(i) {
                chartDistance += distance(points[(i-1)][0],points[(i-1)][1],points[(i-1)][2],value[0],value[1],value[2]);
            }
            
            chartData.push([chartDistance, value[2]]);
        });
        
        if(chartDistance && Math.abs(chartDistance - {{ item.distance * 1000 }}) > 100) {
            //multiplier so that the distance values match the item distance on the chart
            var diff = {{ item.distance * 1000 }} / chartDistance;
            for(var i = 0; i < chartData.length; i++) {
                chartData[i][0] *= diff;
            }
        }
        
        var path = new google.maps.Polyline({
            path: polyline,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        
        path.setMap(map);
        
        //CHART
        
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'chart',
                zoomType: 'x',
                spacingRight: 0,
                spacingLeft: 0, 
                spacingTop: 6,
                spacingBottom: 4,
                type: 'area'
            },
            credits: {
                enabled : false
            },
            title: {
                text: null
            },
            subtitle: {
                text: null
            },
            xAxis: {
                title: {
                    text: null
                },
                labels: {
                    formatter: function() {
                        return Highcharts.numberFormat(this.value / 1000,0) +'km';
                    }
                }
            },
            yAxis: {
                title: {
                    text: null
                },
                labels: {
                    formatter: function() {
                        return Highcharts.numberFormat(this.value,0) +'m';
                    }
                },
                min: 0
            },
            series : [{
                data: chartData
            }],
            tooltip: {
                formatter: function() {
                    var i = this.series.data.indexOf( this.point );
                    var loc = new google.maps.LatLng(points[i][0],points[i][1])
                    positionMarker.setPosition(loc);
                    if(!map.getBounds().contains(loc)) {
                        map.panTo(loc);
                    }
                    return '<b>KilÃ³metro:</b> '+ Highcharts.numberFormat((this.x / 1000 ),1) + '<br/><b>Altitud:</b> '+ Highcharts.numberFormat(this.y, 0) + ' m';
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                area: {
                    fillColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                        stops: [[0, Highcharts.getOptions().colors[0]],[1, 'rgba(255,255,255,0)']]
                    },
                    lineWidth: 2,
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true,
                                radius: 5
                            }
                        }
                    },
                    shadow: false,
                    states: {
                        hover: {
                            lineWidth: 2
                        }
                    }
                }
            }
        });
        
        $(document).keyup(function(e){ if(e.keyCode == '27'){if(isFullScreen){ toggleFullScreen(); }}});
    }
    
    function distance(lat1, lng1, alt1, lat2, lng2, alt2) 
    {         
    	var distproj = 6371000 * 2 * Math.asin( Math.sqrt( Math.pow( Math.sin( deg2rad( lat1  - lat2 ) / 2 ), 2) + Math.cos(deg2rad( lat1 )) * Math.cos( deg2rad( lat2 ) ) * Math.pow( Math.sin( deg2rad( lng1 - lng2 ) / 2 ), 2) )); //harvesinus formula
    	
    	if(lat1 > 60 || lat2 > 60)
    	{
    	   distproj *= 0.9966;
        }
        
    	dist = Math.sqrt( Math.pow( distproj, 2 ) + Math.pow( ( alt1 - alt2 ), 2 ) );
    	
    	return dist;
    }
    function deg2rad (angle) {
        return (angle / 180) * Math.PI;
    }
    
    function toggleFullScreen() {
        var center = map.getCenter();
        if(isFullScreen)
        {
            $('#map').removeClass('fullscreen').addClass('full'); 
            $('#map').css('position','relative');
            $('#mapproperties').removeClass('fullscreen');
            $('#chart').removeClass('fullscreen');
            
            $('body').css('overflow','auto');
        }
        else
        {
            $('#map').removeClass('full').addClass('fullscreen'); 
            $('#map').css('position','absolute');
            $('#mapproperties').addClass('fullscreen');
            $('#chart').addClass('fullscreen');
            
            $('body').css('overflow','hidden');            
        }
        isFullScreen = !isFullScreen;
        
        chart.setSize($('#chart').width(),180);
        google.maps.event.trigger(map, 'resize');
        map.setCenter(center);
        map.fitBounds(bounds);
    }
    
    function toggleWeather() {
        if(weatherLayer && weatherLayer.getMap() != null) {
            weatherLayer.setMap(null);
            $('#weather').removeClass('disabled');
        } else {
            if(!isFullScreen){toggleFullScreen();} 
            if(map.getZoom() > 12){map.setZoom(11);} 
            weatherLayer.setMap(map);
            $('#weather').addClass('disabled');
        }
    }
    
    </script>
    
{% endblock %}